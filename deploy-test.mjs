import { readFileSync, writeFileSync, copyFileSync, existsSync, mkdirSync } from "fs";
import { join, dirname } from "path";
import { execSync } from "child_process";

// Configuration
const CONFIG = {
	// Default test vault path - you can override this with environment variable
	testVaultPath: process.env.OBSIDIAN_TEST_VAULT || '/Users/adar.bahar/Documents/Private/Obsidian-Test/Testing',
	
	// Plugin files to copy
	pluginFiles: [
		'main.js',
		'manifest.json',
		'styles.css'
	],
	
	// Whether to run tests before deploying
	runTests: process.env.SKIP_TESTS !== 'true'
};

console.log('üöÄ Starting deploy-test process...\n');

// Step 1: Run tests if enabled
if (CONFIG.runTests) {
	console.log('üìã Running tests...');
	try {
		execSync('npm test', { stdio: 'inherit' });
		console.log('‚úÖ Tests passed!\n');
	} catch (error) {
		console.error('‚ùå Tests failed!');
		console.error('Deploy aborted due to test failures.\n');
		process.exit(1);
	}
} else {
	console.log('‚è≠Ô∏è  Skipping tests (SKIP_TESTS=true)\n');
}

// Step 2: Verify build files exist
console.log('üîç Checking build files...');
const missingFiles = CONFIG.pluginFiles.filter(file => !existsSync(file));
if (missingFiles.length > 0) {
	console.error(`‚ùå Missing build files: ${missingFiles.join(', ')}`);
	console.error('Make sure to run "npm run build" first.\n');
	process.exit(1);
}
console.log('‚úÖ All build files found!\n');

// Step 3: Read plugin info
const manifest = JSON.parse(readFileSync('manifest.json', 'utf8'));
const pluginId = 'people-test'; // Override for test deployment
const pluginName = manifest.name;
const pluginVersion = manifest.version;

console.log(`üì¶ Plugin: ${pluginName} (${pluginId}) v${pluginVersion}\n`);

// Step 4: Setup test vault directory
const pluginDir = join(CONFIG.testVaultPath, '.obsidian', 'plugins', pluginId);

console.log(`üìÅ Test vault: ${CONFIG.testVaultPath}`);
console.log(`üìÅ Plugin directory: ${pluginDir}\n`);

// Create directories if they don't exist
if (!existsSync(CONFIG.testVaultPath)) {
	console.log('üìÅ Creating test vault directory...');
	mkdirSync(CONFIG.testVaultPath, { recursive: true });
}

if (!existsSync(dirname(pluginDir))) {
	console.log('üìÅ Creating .obsidian/plugins directory...');
	mkdirSync(dirname(pluginDir), { recursive: true });
}

if (!existsSync(pluginDir)) {
	console.log('üìÅ Creating plugin directory...');
	mkdirSync(pluginDir, { recursive: true });
}

// Step 5: Copy plugin files
console.log('üìã Copying plugin files...');
CONFIG.pluginFiles.forEach(file => {
	if (existsSync(file)) {
		const destPath = join(pluginDir, file);
		copyFileSync(file, destPath);
		console.log(`  ‚úÖ ${file} ‚Üí ${destPath}`);
	} else {
		console.log(`  ‚ö†Ô∏è  ${file} not found, skipping`);
	}
});

// Step 6: Create/update test vault configuration
const obsidianConfigDir = join(CONFIG.testVaultPath, '.obsidian');
const communityPluginsPath = join(obsidianConfigDir, 'community-plugins.json');

// Enable the plugin in community-plugins.json
let communityPlugins = [];
if (existsSync(communityPluginsPath)) {
	try {
		communityPlugins = JSON.parse(readFileSync(communityPluginsPath, 'utf8'));
	} catch (error) {
		console.log('‚ö†Ô∏è  Could not parse existing community-plugins.json, creating new one');
	}
}

if (!communityPlugins.includes(pluginId)) {
	communityPlugins.push(pluginId);
	writeFileSync(communityPluginsPath, JSON.stringify(communityPlugins, null, 2));
	console.log(`‚úÖ Enabled plugin in community-plugins.json`);
}

// Step 7: Create a basic test note if vault is empty
const testNotePath = join(CONFIG.testVaultPath, 'Plugin Test Note.md');
if (!existsSync(testNotePath)) {
	const testNoteContent = `# ${pluginName} Test Note

This note was created by the deploy-test script to help you test the plugin.

## Plugin Information
- **Name:** ${pluginName}
- **ID:** ${pluginId}
- **Version:** ${pluginVersion}
- **Deployed:** ${new Date().toLocaleString()}

## Testing Instructions
1. Open this vault in Obsidian
2. Enable the plugin in Settings ‚Üí Community Plugins
3. Test the plugin functionality
4. Check the console for any errors

## Test Data
You can use this note to test the plugin features.

---
*This note was auto-generated by deploy-test script*
`;
	
	writeFileSync(testNotePath, testNoteContent);
	console.log(`‚úÖ Created test note: ${testNotePath}`);
}

// Step 8: Summary
console.log('\nüéâ Deploy-test completed successfully!');
console.log('\nüìã Summary:');
console.log(`  ‚Ä¢ Plugin: ${pluginName} v${pluginVersion}`);
console.log(`  ‚Ä¢ Test vault: ${CONFIG.testVaultPath}`);
console.log(`  ‚Ä¢ Files copied: ${CONFIG.pluginFiles.join(', ')}`);
console.log('\nüîß Next steps:');
console.log('  1. Open the test vault in Obsidian');
console.log('  2. Go to Settings ‚Üí Community Plugins');
console.log(`  3. Enable "${pluginName}"`);
console.log('  4. Test the plugin functionality');

// Step 9: Optional - try to open Obsidian (macOS/Windows)
if (process.env.AUTO_OPEN_OBSIDIAN === 'true') {
	console.log('\nüöÄ Attempting to open Obsidian...');
	try {
		if (process.platform === 'darwin') {
			execSync(`open "obsidian://open?vault=${encodeURIComponent(CONFIG.testVaultPath)}"`);
		} else if (process.platform === 'win32') {
			execSync(`start "obsidian://open?vault=${encodeURIComponent(CONFIG.testVaultPath)}"`);
		} else {
			console.log('‚ö†Ô∏è  Auto-open not supported on this platform');
		}
	} catch (error) {
		console.log('‚ö†Ô∏è  Could not auto-open Obsidian');
	}
}

console.log('\n‚ú® Happy testing!\n');
